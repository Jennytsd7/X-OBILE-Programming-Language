L = [begin, boolean, x, ;, x,=, false, ;, if, x, '{', print, not, x, ;, '}', else, '{', print,false,  ;, '}', end, .],
program(P,L,[]).

G = start(block(declaration(boolean(x)), command(assign(x, just_bool(bool_false(false))), command(if(just_bool(new_term(new_term_val(x))), command(print(printExpr(not_bool(just_bool(new_term(new_term_val(x))))))), command(print(printExpr(just_bool(bool_false(false)))))))))),
eval_program(G,P).

L = [begin, print, '"', 'asdasdsad;aasdi f while','"' , ;, end, .],
program(P,L,[]).
G =  start(block(command(print(printString('asdasdsad;aasdi f while'))))),
eval_program(G,P).

Tokens = [begin, print, '"', 'asdasdsad;aasdi f while','"' , ;, end, .], program(ParseTree,Tokens,[]), eval_program(ParseTree,Result).

begin int x ; x = 5 ; x = x - 1 ; print x ; end .
Tokens = [begin, int, x, ;, x, =, 5, ;, x, =, x, -, 1, ;, print, x, ;, end, .], program(ParseTree,Tokens,[]), eval_program(ParseTree,Result).

G = start(block(declaration(integer(x)), command(assign(x, just_term(new_term(new_term_val(num(5))))), command(assign(x, sub_expr(new_term(new_term_val(x)), just_term(new_term(new_term_val(num(1)))))), command(print(printExpr(just_term(new_term(new_term_val(x))))))))))
eval_program(G,P).

L = [begin, int, x, ;, int, y, ;, x, =, 0, ;, y, =, 5, ;, while, not, x, ~, y, '{', print, x,;, x, =, x, +, 1, ;, '}', end, .],
program(P,L,[]).

G = start(block(declaration(integer(x), declaration(integer(y))), command(assign(x, just_term(new_term(new_term_val(num(0))))), command(assign(y, just_term(new_term(new_term_val(num(5))))), command(while(not_bool(bool_expr(new_term(new_term_val(x)), just_bool(new_term(new_term_val(y))))), command(print(printExpr(just_term(new_term(new_term_val(x))))), command(assign(x, add_expr(new_term(new_term_val(x)), just_term(new_term(new_term_val(num(1)))))))))))))),
eval_program(G,P).

L = [begin, int, x, ;, x, =, 5,;,x,=,x,-,1,;,end,.]
program(P,L,[]).






begin
	int x ;
	x = 5;
	print x;
	x = x + 1;
	print x;
	if {}
end
.	


















